import pandas as pd

import numpy as np

dataset = pd.read_csv('/content/Dataset.csv')

dataset.head(20)

dataset.shape

dataset.describe()

X = dataset.iloc[:, 1:3].values

y = dataset.iloc[:, 0].values

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, 

random_state=0)

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()

X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""# #RANDOM FOREST RREGRESSION -->>"""

from sklearn.ensemble import RandomForestRegressor

regressor = RandomForestRegressor(n_estimators=20, random_state=0)

regressor.fit(X_train, y_train)

y_pred = regressor.predict(X_test)

from sklearn import metrics

print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))

print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))

print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, 

y_pred)))

df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})

df

from sklearn.metrics import confusion_matrix, accuracy_score

print("Training Accuracy = ", regressor.score(X_train, y_train))

print("Test Accuracy = ", regressor.score(X_test, y_test))
"""# LINEAR REGRESION -->>"""

from sklearn.linear_model import LinearRegression

regressor = LinearRegression()

regressor.fit(X_train, y_train)

# Commented out IPython magic to ensure Python compatibility.

import matplotlib.pyplot as plt

# %matplotlib inline

dataset.plot(x='Humidity', y='MoisturePercentage', style='o')

plt.title('Humidity vs MoisturePercentage')

plt.xlabel('Humidity')

plt.ylabel('MoisturePercentage')

plt.show()

dataset.plot(x='Heatcelcius', y='MoisturePercentage', style='o')

plt.title('Heat-Air temperature vs MoisturePercentage')

plt.xlabel('Heat in Celcius')

plt.ylabel('MoisturePercentage')

plt.show()

print(regressor.intercept_)

print(regressor.coef_)

y_pred = regressor.predict(X_test)
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})

df

print("Training Accuracy = ", regressor.score(X_train, y_train))

print("Test Accuracy = ", regressor.score(X_test, y_test))
